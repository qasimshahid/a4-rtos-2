CC = gcc
# GCC Cross Compiler for ARM. Make sure you have this installed so that you can compile the ARM emulation version of the code.
# Install on Linux: sudo apt-get install gcc-arm-linux-gnueabihf

# Directories
SRC_DIR = .
OUT_DIR = .

# Files
SRC_FILE = stopwatch.c
BBBIO_FILE = bbbio.c
OUT_FILE_REAL = stopwatch

# A comment on how this works:
# Our source code has a macro called EMU. When it is set to 1, we are compiling for the emulator.
# When it is set to 0, we are compiling for the BeagleBone.
# The -D argument in GCC allows us to define macros during compilation. This enables conditional compilation,
# meaning we can execute certain parts of the code depending on whether EMU is set to 1 or 0, which we define in our targets.

# Default target (-D EMU=0 / real) compiles for the real board.
all: real

# Target for compiling for BeagleBone (EMU=0) -- ONLY USE THIS WHEN COMPILING ON BEAGLEBONE
# The executable generated by this will not work on your local machine. You can try, but you probably don't have GPIOs which will cause this code to fail since it uses our GPIO library to write to the GPIO filesystem. 
# You likely don't have this GPIO filesystem / structure on your x86 host machine / whatever else your main computer is.
# You should take all the files in the /src directory, transfer them over to the BeagleBone using SFTP or whatever, and then use make real / make all in that directory so that we compile on the BeagleBone.
real: $(SRC_DIR)/$(SRC_FILE) $(SRC_DIR)/$(BBBIO_FILE)
	@echo "Compiling for BeagleBone..."
	@$(CC) -w -o $(OUT_DIR)/$(OUT_FILE_REAL) $(SRC_DIR)/$(SRC_FILE) $(SRC_DIR)/$(BBBIO_FILE) -pthread
	@echo "Complete."

# Clean executables
clean:
	@rm -f $(OUT_DIR)/$(OUT_FILE_REAL)
	@echo "Cleanup completed."